# -*- coding: utf-8 -*-
"""courses Kaggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XEdBGuxRQklYgrmwZi36DH5e107JtJpx

## кросс-валидация
"""

scores = -1 * cross_val_score(my_pipeline, X, y,
                                  cv=3,
                                  scoring='neg_mean_absolute_error')

"""# Нейронка через keras"""

from tensorflow import keras
from tensorflow.keras import layers

model = keras.Sequential([
    # the hidden ReLU layers
    layers.Dense(units=512, activation='relu', input_shape=[11]),
    layers.Dense(units=512, activation='relu'),
    # the linear output layer 
    layers.Dense(units=1),
])

"""или"""

model = keras.Sequential([
    layers.Dense(units=32, input_shape=[8]),
    layers.Activation('relu'),
    layers.Dense(units=32),
    layers.Activation('relu'),
    layers.Dense(units=1)])

"""# Loss и Optimizer"""

model.compile(
    optimizer="adam",
    loss="mae",
)

history = model.fit(
    X_train, y_train,
    validation_data=(X_valid, y_valid),
    batch_size=256,
    epochs=10,
)

import pandas as pd

# convert the training history to a dataframe
history_df = pd.DataFrame(history.history)
# use Pandas native plot method
history_df['loss'].plot();

"""# Остановка обучения"""

from tensorflow import keras
from tensorflow.keras import layers, callbacks

early_stopping = callbacks.EarlyStopping(
    min_delta=0.001, # minimium amount of change to count as an improvement
    patience=20, # how many epochs to wait before stopping
    restore_best_weights=True,
)

model = keras.Sequential([
    layers.Dense(512, activation='relu', input_shape=[11]),
    layers.Dense(512, activation='relu'),
    layers.Dense(512, activation='relu'),
    layers.Dense(1),
])
model.compile(
    optimizer='adam',
    loss='mae',
)

history = model.fit(
    X_train, y_train,
    validation_data=(X_valid, y_valid),
    batch_size=256,
    epochs=500,
    callbacks=[early_stopping], # put your callbacks in a list
    verbose=0,  # turn off training log
)

history_df = pd.DataFrame(history.history)
history_df.loc[:, ['loss', 'val_loss']].plot();
print("Minimum validation loss: {}".format(history_df['val_loss'].min()))

"""# Dropout and Batch Normalization"""

keras.Sequential([
    # ...
    layers.Dropout(rate=0.3), # apply 30% dropout to the next layer
    layers.Dense(16),
    # ...
])

layers.Dense(16, activation='relu'),
layers.BatchNormalization()

OR
layers.Dense(16),
layers.BatchNormalization(),
layers.Activation('relu'),

"""# Бинарная кросс-энтропия для задач классификации"""

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['binary_accuracy'],
)



"""# Титаник через подбор параметров"""

import numpy as np
from tensorflow.keras import callbacks

from sklearn.datasets import load_breast_cancer

from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

from tensorflow.keras.wrappers.scikit_learn import KerasClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization

from tensorflow.keras.utils import plot_model
from PIL import Image
import pandas as pd

train = pd.read_csv('/content/train.csv')
test = pd.read_csv('/content/test.csv')
X_test = test.drop(["PassengerId", "Name", "Ticket", "Cabin"], axis=1)
X_test = pd.get_dummies(X_test)
X_test = X_test.drop("Sex_male", axis=1).rename(columns={'Sex_female':'Sex'})
X_test = X_test.fillna({'Age':X_test.Age.median()})
X_test = X_test.fillna({'Fare':X_test.Fare.median()})
X_train = train.drop(["PassengerId", "Name", "Ticket", "Cabin"], axis=1)
X_train = pd.get_dummies(X_train)
X_train = X_train.fillna({'Age':X_train.Age.median()})
X_train = X_train.drop('Sex_male', axis=1).rename(columns={'Sex_female':'Sex'})
y_train = X_train.Survived
X_train = X_train.drop('Survived', axis  = 1)
X_test

X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train,test_size= 0.1, )
print(X_train.shape)

# Класс кастомного классификатора
class ModelBuilder(object):
  # Конструктор класса
  def __init__(self):
    pass

# Метод, используемый GridSearchCV 
  # для установки параметров
  def set_params(self, 
                 layers=[],
                 optimizer='sgd',
                 loss='binary_crossentropy',
                 metric=['accuracy'],
                 epochs=60,
                 batch_size=5):
     
    # Установка параметров в качестве полей класса
    self.__layers = layers
    self.__optimizer = optimizer
    self.__loss = loss
    self.__metric = metric
    self.__epochs = epochs
    self.__batch_size = batch_size

     
    # Преобразования модели в классификатор sklearn
    self.model = KerasClassifier(build_fn=self.__build, 
                                 epochs=epochs,
                                 batch_size=batch_size)
    
  # Функция для постройки модели   
  def __build(self):
     
    model = Sequential(self.__layers)
       
    model.compile(optimizer=self.__optimizer, 
                  loss=self.__loss, 
                  metrics=self.__metric)
     
    return model

  # Адаптирование модели   
  def fit(self, X, y):
     
    return self.model.fit(x=X, y=y)
   
   
  # Предсказание модели
  def predict(self, X):
     
    return self.model.predict(X)
   
   
  # Вычисление точности предсказания
  def score(self, X, y):
     
    return self.model.score(X, y)

# Различные наборы слоёв
params = {
  'clf__layers': [[Dense(256, activation='relu', input_shape=(30, )),                            
                   Dense(256, activation='relu'), 
                   Dropout(0.4), 
                   Dense(1, activation='tanh')],
          [Dense(64, activation='relu', input_shape=(9, )), 
           Dropout(0.4), 
           BatchNormalization(),
           Dense(64, activation='relu'),
           Dense(1, activation='sigmoid')],
          [Dense(16, activation='softmax', input_shape=(9, )), 
           Dropout(0.4), 
           Dense(16, activation='softmax'), 
           BatchNormalization(),
           Dense(16, activation='softmax'),
          Dropout(0.4), 
           Dense(1, activation='softmax')]
          ],
  'clf__optimizer': ['rmsprop'],
  'clf__loss': ['binary_crossentropy'],
  'clf__metric': [['accuracy']],
  'clf__epochs': [25,50]
  }

# Инициализация трансформера
scaler = StandardScaler()

# Инициализация классификатора
clf = ModelBuilder()

# Создание конвеера
pipeline = Pipeline([('scaler', scaler), ('clf', clf)])

# Построение класса, выполняющего сеточный поиск
grid_search = GridSearchCV(pipeline, params)

# Алгоритм обучает множество моделей на тренировочных данных
grid_search.fit(X_train, y_train)

params = grid_search.best_params_

layers    = params['clf__layers']
metric    = params['clf__metric']
optimizer = params['clf__optimizer']
epochs    = params['clf__epochs']
loss      = params['clf__loss']

print(params)

# Построение модели, основываясь на лучшие "гиперпараметры"
model = Sequential(layers)

model.compile(optimizer=optimizer,
              loss=loss,
              metrics=metric)

plot_model(model, to_file='C:\model.png')

max_train = 0.8439450860023499
max_test = 0.8222222328186035

model = grid_search.best_estimator_

train_score = model.score(X_train, y_train)
test_score = model.score(X_valid, y_valid)

print('Score on train data is {0}'.format(train_score))
print('Score on test data is {0}'.format(test_score))

if (train_score > max_train) or (test_score > max_test):
    print('better then old')
    max_train = train_score
    max_test =test_score
    best_model = grid_search.best_estimator_

prediction = model.predict(X_test)
prediction

prediction= pd.DataFrame(prediction)
prediction.to_csv('submission.csv')